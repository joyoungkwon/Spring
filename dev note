지금 까지의 개발 정리

새로운 할인 정책 개발
새로운 할인 정책 적용과 문제점
"관심사의 분리"
appConfig 리팩터링
새로운 구조와 할인 정책 적용

"새로운 할인 정책 개발"
다형성 덕분에 새로운 정률 활인 정책 코드를 추가로 개발하는 것 자체는 아무 문제가 없음

" 새로운 할인 정책 적용과 문제점"
새로 개발한 정률 할인 정책을 적용하려고 하니 " 클라이언트 코드" 인 주문 서비스 구현체도 함께 변경해야함
주문서비스 클라이언트가 인터페이스인 DiscountPolicy뿐만 아니라 구체클래스인 FixDiscountPolicy 도 함께 의존 -> 이는 DIP위반

"관심의분리"
어플리케이션을 하나의 공연으로 생각
기존에는 클라이언트가 의존하는 서버 구현 객체를 직접실행하고, 실행함
메인 클래스를 구성하고 어떤 객체를 쓸지 정하고 지정하는 담당의 별도에
기획자 같은 클래스가 나올 시점
이는 AppConfig가 실행
AppConfig는 어플리케이션의 전체 동작 방식을 구성 하기 위해 구현객체를 생성하고 "연결"하는 책임
이제부터 클라이언트 객체는 자신의 역할을 실행하는것만 집중 "권한"이 줄어듬 이는 책임이 명확해짐을 의미

"AppConfig 리펙터링"
구성정보에서 역할과 구현을 명확하게 분리
역할이 잘 드러남
중복제거

"새로운 구조와 할인정책 적용"
정액 할인정책 -> 정률 %할인정책으로 변경
AppConfig의 등장으로 어플리케이션이 크게"사용역역"과 객체를 생성하고 구성(Configuration)하는 영역으로 분리
할인 정책을 변경해도 AppConfig가 있는 구성영역에만 변경하면됨 , 사용영역은 변경할 필요가 없음, 물론 클라이언트 코드인 주문서비스 코드도 변경하지 않음 (OrderServiceClass)





좋은 객체 지향 설계의 5가지 원칙의 적용
SRP 단일 책임 원칙
"한클래스는 하나의 책임만 가져야 한다"
클라이언트 객체는 직접 객체를 생성하고 연결하고 실행하는 다양한 책임을 가지고 있었음
SRP 단일 책임 원칙을 따르면서 관심사를 분리함
구현 객체를 생성하고 연결하는 책임은 AppConfig가 담당 ()
클라이언트 객체는 실행하는 책임만 담당하도록 리펙토링


DIP 의존관계 역전 원칙
"프로그래머는 추상화에 의존해야하며 구체화의 의존하면 안된다"의존성 주입은 이 원칙을 따르는 방법중 하나다.
새로운 할인 정책을 개발하고 적용을 하려고하니 클라이언트 코드도 함께 변경을 해야했다 -> 의존 관계 직접 주입
OrderService 는 DIP 를 지키며 DiscountPolicy 추상화 인터페이스에 의존하는거 같았지만
FixDiscountPolicy 구체화 구현 클래스에도 함께 의존했다
클라이언트 코드가 DiscountPolicy 추상화 인터페이스에만 의존하도록 코드를 변경했다.
하지만 클라이언트 코드는 인터페이스에만 실행할수 없었다
AppConfig가 FixDiscountPolicy 객체 인스턴스를 클라이언트 코드 대신 생성하여 클라이언트 코드에 의존관계를 주입 하게 했다 ((DI)를 외부에서 넣어줌)
이렇게하여 DIP 원칙을 따르며 NullPointException을 해결했다.


OCP
"소프트웨어 요소는 확장에는 열려있으나 변경에는 닫혀있어야 한다"

다향성을 사용하고 클라이언트가 DIP를 지킴
애플리케이션을 사용영역과 구성역역으로 나눔
AppConfig 의존관계를 FixDiscountPolicy -> RateDiscountPolicy 로 변경해서 클라이언트 코드에 주입하므로 클라이언트 코드에서는 변경하지 않아도 됨

"소프트웨어 요소를 새롭게 확장해도 사용영역의 코드 변경은 닫혀있다."


스프링 컨테이너

ApplicationContext 를 스프링 컨테이너라고 한다.
기존에는 AppConfig 를 사용해서 직접 객체를 생성하고 DI를 했지만 이제부터는 스프링 컨테이너를 통해서
사용한다.

스프링컨테이너는 @Configuration 이 붙은 AppConfig를 설정 및 구성 을 정보로 사용한다
여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다
이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.

스프링 빈은 @Bean 이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다 (memberService, orderService)

이전에는 ㄱ필요한 객체를 AppConfig를 사용해서 직접 조회했지만 이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈 을 찾고, 스프링은 빈은 applicationContext.getBean() 메서드를 통해서 찾을수 있다.

기존에는 직접 자바코드로모든것을 했다면 바뀐 내용은 스프링 컨테이너에 객체를 스프링 빈으로 등록하고,
스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록, 변경되었다

/5/12
추가한Annotation종류
테스트 메소드 정하기 @Test
테스트의 이름 정하기 @DisplayName
해당 클래스를 Spring 컨테이너로 지정할때 쓰는 @Configuration


ApplicationContext ac  = new AnnotationConfigurationContext(AppConfing.Class);
AnnotationConfigApplicationContext  ac = new AnnotationConfigApplication(AppConfig.Class); 의 차이.

"ApplicationContext ac  = new AnnotationConfigurationContext(AppConfing.Class);"
+내가 설정한 스프링 컨테이너 AppConfig의 @Bean이나 정보들을 ac 란 ApplicationContext란 객체에 넣고 사용하길 의미.
(이 코드는 AnnotationConfigApplicationContext를 사용하여 AppConfig 클래스의 빈 정보를 읽어들여 Spring 컨테이너를 초기화하고,
 이를 ac라는 ApplicationContext 객체에 담고. 이후에는 ac를 통해 해당 스프링 컨테이너에 등록된 빈들을 사용)

AnnotationConfigApplicationContext  ac = new AnnotationConfigApplication(AppConfig.Class);
+-> AppConfig라는 스프링 컨테이너의 @Bean정보를 ac에 담겠다.




@Test
@DisplayName(Application Bean Info)
    void findApplicationBean(){
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();
        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);
            if(beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION){
                Object bean = ac.getBean(beanDefinitionName);
                System.out.println("name = " + beanDefinitionName+" object = " + bean);
            }

        }
    }

 ↗
"@DisplayName(Application Bean Info)"
+
bean 저장소에는 배열처럼 0번쨰 방(key) 의 내가 지정한 BeanName(value) 상수값이 자동으로 지정된다.
그래서 getRole()이라는 int 반환 타입으로 key 값을 순회하며 ROLE_APPLICATION (내가 생성한) 의 빈 생성 상수 값(KEY)과 비교하여
순회한 int (key) 값과 내가만든 빈은 상수로 생성된 (KEY)값이 같은지를 비교 하고 같으면 오브젝트 타입으로 Bean의 정보를 저장시키고
zero에서 last index 까지 순회하며 출력한다.

